pipeline {
  agent any
  options { timestamps() }

  environment {
    // ==== CHANGE THESE FOR YOUR INSTANCE ====
    APP_HOST   = '35.89.163.155'                     // your app server public IP/DNS
    SSH_KEY    = '/var/lib/jenkins/.ssh/app.pem'     // private key path on Jenkins node
    SSH_USER   = 'ubuntu'                            // EC2 Ubuntu AMI default
    PORT       = '8080'
    // If your project builds a different file, change this:
    WAR_NAME   = 'addressbook.war'                   // produced in target/
    // App context: 'addressbook' -> http://host:8080/addressbook/
    // Use 'ROOT' if you want it at http://host:8080/
    CONTEXT    = 'addressbook'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          branches: [[name: '*/main']],
          userRemoteConfigs: [[url: 'https://github.com/venkatasai449/hello-web']]
        ])
      }
    }

    stage('Build WAR') {
      steps {
        sh '''
          set -Eeuo pipefail
          mvn -B -DskipTests clean package
          echo "Built artifacts:"
          ls -lh target || true
          test -f "target/${WAR_NAME}" || { echo "ERROR: target/${WAR_NAME} not found"; exit 1; }
        '''
      }
    }

    stage('Copy WAR to app node') {
      steps {
        sh '''
          set -Eeuo pipefail
          test -f "${SSH_KEY}" || { echo "ERROR: SSH key not found at ${SSH_KEY}"; exit 1; }
          chmod 600 "${SSH_KEY}"
          scp -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            "target/${WAR_NAME}" "${SSH_USER}@${APP_HOST}:/tmp/${WAR_NAME}"
        '''
      }
    }

    stage('Install Java/Tomcat & Deploy') {
      steps {
        sh '''
          set -Eeuo pipefail
          export DEBIAN_FRONTEND=noninteractive

          ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            "${SSH_USER}@${APP_HOST}" "bash -s" << 'REMOTE'
set -Eeuo pipefail
export DEBIAN_FRONTEND=noninteractive

# Detect package manager
if command -v apt-get >/dev/null 2>&1; then
  PKG=apt
elif command -v dnf >/dev/null 2>&1; then
  PKG=dnf
elif command -v yum >/dev/null 2>&1; then
  PKG=yum
else
  PKG=none
fi

# Ensure Java installed
if ! command -v java >/dev/null 2>&1; then
  if [ "$PKG" = apt ]; then
    sudo apt-get update -y
    sudo apt-get install -y default-jdk
  elif [ "$PKG" = dnf ]; then
    sudo dnf install -y java-11-openjdk || sudo dnf install -y java-17-openjdk
  elif [ "$PKG" = yum ]; then
    sudo yum install -y java-11-openjdk || sudo yum install -y java-17-openjdk
  else
    echo "ERROR: No package manager to install Java" >&2; exit 1
  fi
fi

# Derive JAVA_HOME and persist for tomcat9 (Debian/Ubuntu service layout)
JAVA_DIR=$(dirname "$(dirname "$(readlink -f "$(command -v java)")")")
if [ -d /etc/default ]; then
  if [ -f /etc/default/tomcat9 ]; then
    if grep -q '^JAVA_HOME=' /etc/default/tomcat9; then
      sudo sed -i "s|^JAVA_HOME=.*|JAVA_HOME=${JAVA_DIR}|" /etc/default/tomcat9
    else
      echo "JAVA_HOME=${JAVA_DIR}" | sudo tee -a /etc/default/tomcat9 >/dev/null
    fi
  fi
fi

# Function to find webapps dir
find_webapps() {
  [ -d /var/lib/tomcat9/webapps ] && { echo /var/lib/tomcat9/webapps; return; }
  [ -d /var/lib/tomcat/webapps  ] && { echo /var/lib/tomcat/webapps;  return; }
  [ -d /usr/share/tomcat/webapps ] && { echo /usr/share/tomcat/webapps; return; }
  [ -d /opt/tomcat/webapps ] && { echo /opt/tomcat/webapps; return; }
  for d in /usr/share/apache-tomcat*/webapps; do
    [ -d "$d" ] && { echo "$d"; return; }
  done
  echo ""
}

# Ensure Tomcat installed (package) if not found
WEBAPPS=$(find_webapps)
if [ -z "$WEBAPPS" ]; then
  if [ "$PKG" = apt ]; then
    sudo apt-get update -y
    sudo apt-get install -y tomcat9
  elif [ "$PKG" = dnf ]; then
    sudo dnf install -y tomcat
  elif [ "$PKG" = yum ]; then
    sudo yum install -y tomcat
  else
    echo "ERROR: Could not install Tomcat (no pkg mgr)" >&2; exit 1
  fi
  WEBAPPS=$(find_webapps)
fi

[ -n "$WEBAPPS" ] || { echo "ERROR: Could not find Tomcat webapps directory after install."; exit 1; }

# Determine service name
if systemctl list-unit-files | grep -q '^tomcat9\\.service'; then
  SVC=tomcat9
elif systemctl list-unit-files | grep -q '^tomcat\\.service'; then
  SVC=tomcat
else
  SVC=tomcat9
fi

echo "Using WEBAPPS=${WEBAPPS}  SVC=${SVC}  JAVA_HOME=${JAVA_DIR}"

# Stop Tomcat (ignore if not running)
sudo systemctl stop "${SVC}" || true

# Deploy WAR
CONTEXT="${CONTEXT}"
WAR_NAME="${WAR_NAME}"

# If deploying as ROOT, the file must be ROOT.war
TARGET_WAR="${WEBAPPS}/${CONTEXT}.war"
if [ "${CONTEXT}" = "ROOT" ]; then
  TARGET_WAR="${WEBAPPS}/ROOT.war"
fi

sudo rm -rf "${WEBAPPS:?}/${CONTEXT}" "${TARGET_WAR}" || true
sudo mv "/tmp/${WAR_NAME}" "${TARGET_WAR}"

# Ownership if tomcat user exists
if id tomcat >/dev/null 2>&1; then
  sudo chown tomcat:tomcat "${TARGET_WAR}"
elif id tomcat9 >/dev/null 2>&1; then
  sudo chown tomcat9:tomcat9 "${TARGET_WAR}"
fi

# Start Tomcat and wait
sudo systemctl daemon-reload || true
sudo systemctl start "${SVC}"
sudo systemctl is-active "${SVC}"
sleep 8

REMOTE
        '''
      }
    }

    stage('Smoke test') {
      steps {
        sh '''
          set -Eeuo pipefail
          if [ "${CONTEXT}" = "ROOT" ]; then
            URL="http://${APP_HOST}:${PORT}/"
          else
            URL="http://${APP_HOST}:${PORT}/${CONTEXT}/"
          fi
          echo "Probing: $URL"
          # Try a few times to allow auto-deploy
          for i in 1 2 3 4 5; do
            if curl -fsSIL "$URL" >/dev/null 2>&1; then
              echo "‚úÖ Up: $URL"
              exit 0
            fi
            sleep 3
          done
          echo "ERROR: App did not respond at $URL"
          curl -v "$URL" || true
          exit 1
        '''
      }
    }
  }

  post {
    success {
      script {
        def base = (env.CONTEXT == 'ROOT') ? '/' : "/${env.CONTEXT}/"
        echo "üéâ Deployed: http://${env.APP_HOST}:${env.PORT}${base}"
      }
    }
    failure {
      echo "‚ùå Deployment failed. Check the stage logs above."
    }
  }
}
