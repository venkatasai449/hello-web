pipeline {
  agent any
  options { timestamps() }

  environment {
    APP_HOST = '35.89.163.155'      // e.g. 35.89.163.155
    APP_USER = 'ubuntu'                         // 'ubuntu' for Ubuntu AMIs, 'ec2-user' for Amazon Linux
    SSH_KEY  = '/var/lib/jenkins/.ssh/app.pem'  // path on the Jenkins box
    CONTEXT  = 'ROOT'                    // URL context => http://IP:8080/addressbook/
    WAR_NAME = 'addressbook.war'                // produced by your pom.xml
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Build WAR') {
      steps {
        sh 'mvn -B -DskipTests clean package'
        sh 'ls -l target'
      }
    }

    stage('Copy WAR to app node') {
      steps {
        sh '''
          set -eux
          test -f "$SSH_KEY"
          chmod 600 "$SSH_KEY"
          scp -i "$SSH_KEY" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            "target/$WAR_NAME" "$APP_USER@$APP_HOST:/tmp/$WAR_NAME"
        '''
      }
    }

    stage('Install/Detect Tomcat & Deploy') {
      steps {
        sh '''
          set -eux
          # pass env vars into remote shell, then run our script via heredoc
          ssh -i "$SSH_KEY" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
             "$APP_USER@$APP_HOST" "CONTEXT='$CONTEXT' WAR_NAME='$WAR_NAME' DEBIAN_FRONTEND=noninteractive bash -s" <<'EOS'
set -eux

# Identify package manager
if command -v apt-get >/dev/null 2>&1; then
  PKG=apt
elif command -v dnf >/dev/null 2>&1; then
  PKG=dnf
elif command -v yum >/dev/null 2>&1; then
  PKG=yum
else
  PKG=none
fi

find_webapps() {
  for d in \
    /var/lib/tomcat9/webapps \
    /var/lib/tomcat/webapps \
    /usr/share/tomcat/webapps \
    /opt/tomcat/webapps \
    /usr/share/apache-tomcat*/webapps
  do
    # glob may stay literal for non-existent apache-tomcat*; suppress errors
    for dd in $d; do
      [ -d "$dd" ] && echo "$dd" && return 0
    done
  done
  return 1
}

WEBAPPS=""
if find_webapps >/dev/null 2>&1; then
  WEBAPPS="$(find_webapps)"
else
  if [ "$PKG" = apt ]; then
    sudo apt-get update -y
    sudo apt-get install -y tomcat9
  elif [ "$PKG" = dnf ]; then
    sudo dnf install -y tomcat
  elif [ "$PKG" = yum ]; then
    sudo yum install -y tomcat
  else
    echo "No supported package manager found." >&2
    exit 1
  fi
  WEBAPPS="$(find_webapps || true)"
fi

if [ -z "${WEBAPPS:-}" ]; then
  echo "ERROR: Could not find Tomcat webapps directory after install." >&2
  exit 1
fi

# Service name
if systemctl list-unit-files | grep -q '^tomcat9\\.service'; then
  SVC=tomcat9
elif systemctl list-unit-files | grep -q '^tomcat\\.service'; then
  SVC=tomcat
else
  SVC=tomcat9
fi

echo "Using WEBAPPS=$WEBAPPS  SVC=$SVC  CONTEXT=$CONTEXT  WAR_NAME=$WAR_NAME"

# Stop if running (ignore errors)
sudo systemctl stop "$SVC" || true

# Clean any previous deploy
sudo rm -rf "$WEBAPPS/$CONTEXT" "$WEBAPPS/$CONTEXT.war" || true

# Move new WAR
sudo mv "/tmp/$WAR_NAME" "$WEBAPPS/$CONTEXT.war"

# Fix ownership if tomcat user exists
if id tomcat >/dev/null 2>&1; then
  sudo chown tomcat:tomcat "$WEBAPPS/$CONTEXT.war"
elif id tomcat9 >/dev/null 2>&1; then
  sudo chown tomcat9:tomcat9 "$WEBAPPS/$CONTEXT.war"
fi

# Start and wait for auto-deploy
sudo systemctl start "$SVC"
sudo systemctl is-active "$SVC"
sleep 6
EOS
        '''
      }
    }

    stage('Smoke test') {
      steps {
        sh '''
          set -eux
          curl -fsS "http://$APP_HOST:8080/$CONTEXT"  || curl -fsS "http://$APP_HOST:8080/$CONTEXT/" || true
          echo "✅ Deployed to: http://$APP_HOST:8080/$CONTEXT/"
        '''
      }
    }
  }

  post {
    failure { echo "❌ Deployment failed. Check the stage logs above." }
  }
}
